# merge two sorted lists

# link: https://leetcode.com/problems/merge-two-sorted-lists/description/

# Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

# definition for singly linked list

class ListNode(object):
	def __init__(self, x):
		self.val = x
		self.next = None

class Solution(object):

	def mergeTwoLists(self, l1, l2):
		"""
		:type l1: ListNode
		:type l2: ListNode
		:rtype: ListNode
		 """
		
		# iterative solution
		# init new (merged) linked list
		newList = ListNode(-1)
		# create a pointer to the new merged list and use for comparison
		prev = newList

		while l1 and l2:
			if l1.val <= l2.val:
				prev.next = l1
				l1 = l1.next
			else:
				prev.next = l2
				l2 = l2.next
			prev = prev.next
		# exactly one of them will be non-null at this point so connect the non-null list
		# to the mergest list
		prev.next = l1 if l1 is not None else l2
		return newList.next
